{
	"info": {
		"_postman_id": "797a3cbf-795b-4238-9cd5-afd0aca2a059",
		"name": "simpletask",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43028346",
		"_collection_link": "https://simpletask-9969.postman.co/workspace/simpletask~e04801e4-1288-44b2-818a-d2eca507c191/collection/43028346-797a3cbf-795b-4238-9cd5-afd0aca2a059?action=share&source=collection_link&creator=43028346"
	},
	"item": [
		{
			"name": "User API",
			"item": [
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/{{userid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{userid}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"michael\",\n    \"email\": \"michal@email.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"michael\",\n    \"email\": \"test@email.com\",\n    \"phone\": \"555-555-5555\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{userid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{userid}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{userid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{userid}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Task API",
			"item": [
				{
					"name": "Get Tasks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?id={{userid}}&status={{status}}&order={{order}}&limit={{limit}}&offset={{offset}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "id",
									"value": "{{userid}}"
								},
								{
									"key": "status",
									"value": "{{status}}"
								},
								{
									"key": "order",
									"value": "{{order}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "offset",
									"value": "{{offset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Complete technical assessment\",\n  \"status\": \"pending\",\n  \"due_date\": \"2025-09-30T23:59:59Z\",\n  \"idemp_key\": \"tech-assessment-001\",\n  \"user_id\": \"{{userid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{taskid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{taskid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Review pull request #123\",\n  \"status\": \"in_progress\",\n  \"due_date\": \"2025-09-27T17:00:00Z\",\n  \"user_id\": \"{{userid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{taskid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{taskid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{taskid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{taskid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/summary?id={{userid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"summary"
							],
							"query": [
								{
									"key": "id",
									"value": "{{userid}}",
									"description": "User ID to get task summary for"
								}
							]
						},
						"description": "Get a summary of tasks grouped by status (pending, in_progress, done) for a specific user ID."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "userid",
			"value": ""
		},
		{
			"key": "order",
			"value": "",
			"type": "default"
		},
		{
			"key": "limit",
			"value": "",
			"type": "default"
		},
		{
			"key": "offset",
			"value": "",
			"type": "default"
		},
		{
			"key": "status",
			"value": "",
			"type": "default"
		},
		{
			"key": "taskid",
			"value": "",
			"type": "default"
		}
	]
}